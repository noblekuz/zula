{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { useTranslation } from \"react-i18next\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\nimport BookScreen from \"../screens/Books\";\nimport DashboardScreen from \"../screens/Dashboard\";\nimport HomeScreen from \"../screens/Home\";\nimport LoginScreen from \"../screens/Login\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport ProfileScreen from \"../screens/Profile\";\nimport SignupScreen from \"../screens/Signup\";\nimport themes from \"../constants/theme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar Homestack = createNativeStackNavigator();\n\nfunction HomestackNavigator() {\n  var _useState = useState('de'),\n      _useState2 = _slicedToArray(_useState, 2),\n      language = _useState2[0],\n      setLanguage = _useState2[1];\n\n  var _useTranslation = useTranslation(),\n      i18n = _useTranslation.i18n;\n\n  var options = {\n    homeHeader: {\n      title: '',\n      headerBackVisible: false,\n      headerLeft: function headerLeft() {\n        return null;\n      },\n      headerRight: function headerRight() {\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleChangeLanguage();\n          },\n          children: _jsx(Text, {\n            style: styles.headerRight,\n            children: language\n          })\n        });\n      }\n    },\n    dashboard: {\n      title: \"Parent Dashboard\",\n      headerBackVisible: false,\n      headerRight: function headerRight() {\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleChangeLanguage();\n          },\n          children: _jsx(Text, {\n            style: styles.headerRight,\n            children: language\n          })\n        });\n      },\n      headerLeft: function headerLeft() {\n        return _jsx(TouchableOpacity, {\n          children: _jsx(Image, {\n            style: styles.avatar,\n            source: require(\"../assets/images/icon.png\")\n          })\n        });\n      },\n      headerTitleStyle: {\n        fontSize: 25,\n        color: \"#00263A\"\n      },\n      headerStyle: {\n        backgroundColor: \"#F7F7F7\"\n      }\n    }\n  };\n\n  var handleChangeLanguage = function handleChangeLanguage() {\n    if (language == 'de') {\n      setLanguage('en');\n    } else {\n      setLanguage('de');\n    }\n\n    i18n.changeLanguage(language);\n  };\n\n  return _jsxs(Stack.Navigator, {\n    initialRouteName: \"Home\",\n    children: [_jsx(Stack.Screen, {\n      name: \"Home\",\n      component: RootStackNavigator,\n      options: options.homeHeader\n    }), _jsx(Stack.Screen, {\n      name: \"NotFound\",\n      component: NotFoundScreen,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"Dashboard\",\n      component: DashboardScreen,\n      options: options.dashboard\n    }), _jsx(Stack.Screen, {\n      name: \"Books\",\n      component: BookScreen,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Stack.Group, {\n      screenOptions: {\n        presentation: \"modal\"\n      },\n      children: _jsx(Stack.Screen, {\n        name: \"Profile\",\n        component: ProfileScreen,\n        options: {\n          headerShown: false\n        }\n      })\n    })]\n  });\n}\n\nfunction RootStackNavigator() {\n  return _jsxs(Homestack.Navigator, {\n    children: [_jsx(Homestack.Screen, {\n      name: \"Home\",\n      component: HomeScreen,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Homestack.Screen, {\n      name: \"Login\",\n      component: LoginScreen,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Homestack.Screen, {\n      name: \"Signup\",\n      component: SignupScreen,\n      options: {\n        headerShown: false\n      }\n    })]\n  });\n}\n\nexport default function Navigation(_ref) {\n  var colorScheme = _ref.colorScheme;\n  var theme;\n\n  var setTheme = function setTheme() {\n    theme = themes.light;\n\n    if (colorScheme === \"dark\") {\n      theme = themes.dark;\n    }\n\n    return theme;\n  };\n\n  setTheme();\n  return _jsx(NavigationContainer, {\n    linking: LinkingConfiguration,\n    theme: theme,\n    children: _jsx(HomestackNavigator, {})\n  });\n}\nvar styles = StyleSheet.create({\n  avatar: {\n    width: 40,\n    height: 30,\n    borderRadius: 100,\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: \"#00263A\"\n  },\n  headerRight: {\n    fontSize: 20,\n    color: \"#00263A\"\n  }\n});","map":{"version":3,"sources":["/Users/ansu/zula/src/zula-app/src/navigation/index.tsx"],"names":["React","useState","useTranslation","NavigationContainer","createNativeStackNavigator","LinkingConfiguration","BookScreen","DashboardScreen","HomeScreen","LoginScreen","NotFoundScreen","ProfileScreen","SignupScreen","themes","Stack","Homestack","HomestackNavigator","language","setLanguage","i18n","options","homeHeader","title","headerBackVisible","headerLeft","headerRight","handleChangeLanguage","styles","dashboard","avatar","require","headerTitleStyle","fontSize","color","headerStyle","backgroundColor","changeLanguage","RootStackNavigator","headerShown","presentation","Navigation","colorScheme","theme","setTheme","light","dark","StyleSheet","create","width","height","borderRadius","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useTranslation } from \"react-i18next\";\nimport { ColorSchemeName, Image, Text, TouchableOpacity, StyleSheet } from \"react-native\";\nimport { NavigationContainer, DefaultTheme, DarkTheme } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\nimport { RootStackParamList, HomeStackParamList } from \"../../types\";\nimport BookScreen from \"../screens/Books\";\nimport DashboardScreen from \"../screens/Dashboard\"\nimport HomeScreen from \"../screens/Home\";\nimport LoginScreen from \"../screens/Login\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport ProfileScreen from \"../screens/Profile\";\nimport SignupScreen from \"../screens/Signup\";\n\nimport themes from '../constants/theme';\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\nconst Homestack = createNativeStackNavigator<HomeStackParamList>();\n\nfunction HomestackNavigator() {\n  const [language, setLanguage] = useState('de');\n  const { i18n } = useTranslation();\n\n  const options = {\n    homeHeader: {\n      title: '',\n      headerBackVisible: false,\n      headerLeft: () => null,\n      headerRight: () => (\n        <TouchableOpacity\n          onPress={() => handleChangeLanguage()}\n        >\n          <Text style={styles.headerRight}>{language}</Text>\n        </TouchableOpacity>\n      ),\n    },\n\n    dashboard: {\n      title: \"Parent Dashboard\",\n      headerBackVisible: false,\n      headerRight: () => (\n        <TouchableOpacity\n          onPress={() => handleChangeLanguage()}\n        >\n          <Text style={styles.headerRight}>{language}</Text>\n        </TouchableOpacity>\n      ),\n      headerLeft: () => (\n        <TouchableOpacity >\n          <Image\n            style={styles.avatar}\n            source={require(\"../assets/images/icon.png\")}\n          />\n        </TouchableOpacity>\n      ),\n      headerTitleStyle: {\n        fontSize: 25,\n        color: \"#00263A\"\n      },\n      headerStyle: {\n        backgroundColor: \"#F7F7F7\",\n      }\n    }\n  }\n\n  const handleChangeLanguage = () => {\n    if (language == 'de') {\n      setLanguage('en')\n    } else {\n      setLanguage('de')\n    }\n    i18n.changeLanguage(language)\n  };\n\n  return (\n    <Stack.Navigator initialRouteName=\"Home\">\n      <Stack.Screen name=\"Home\" component={RootStackNavigator} options={options.homeHeader} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ headerShown: false }}/>\n      <Stack.Screen name=\"Dashboard\" component={DashboardScreen} options={options.dashboard} />\n      <Stack.Screen name=\"Books\" component={BookScreen} options={{ headerShown: false }} />\n      <Stack.Group screenOptions={{ presentation: \"modal\" }}>\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} options={{ headerShown: false }}/>\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\nfunction RootStackNavigator() {\n  return (\n    <Homestack.Navigator>\n      <Homestack.Screen name=\"Home\" component={HomeScreen} options={{ headerShown: false }} />\n      <Homestack.Screen name=\"Login\" component={LoginScreen} options={{ headerShown: false }} />\n      <Homestack.Screen name=\"Signup\" component={SignupScreen} options={{ headerShown: false }} />\n    </Homestack.Navigator>\n  )\n}\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  let theme;\n\n  const setTheme = () => {\n    theme = themes.light\n    if (colorScheme === \"dark\") {\n      theme = themes.dark\n    }\n    return theme\n  };\n\n  setTheme()\n\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={theme}>\n      <HomestackNavigator />\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  avatar: {\n    width: 40,\n    height: 30,\n    borderRadius: 100,\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: \"#00263A\"\n  },\n  headerRight: {\n    fontSize: 20,\n    color: \"#00263A\"\n  }\n})\n"]},"metadata":{},"sourceType":"module"}